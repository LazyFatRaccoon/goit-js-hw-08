{"mappings":"sgBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,QACpCC,QAAQC,IAAIJ,GACZ,MAAMK,EAAsB,oBAE5B,GAAIC,aAAaC,QAAQF,GACpB,IAAM,IAAIG,EAAMC,KAAKC,MAAMJ,aAAaC,QAAQF,IAC7C,IAAIL,EAAKW,UAAUC,QAAOC,GAAc,WAAVA,EAAGC,OAAiBC,KAAIF,GAAIA,EAAGG,MAAQR,EAAIK,EAAGI,QAChF,MAAMC,GAAM,OAAOA,EAKvB,IAAIC,EAAY,GAQhBnB,EAAKoB,iBAAiB,SAAS,EAAAtB,EAAAuB,UAAS,KANxC,WACIF,EAAYG,OAAOC,YAAY,IAAIvB,EAAKW,UAAUC,QAAOC,GAAc,WAAVA,EAAGC,OAAiBC,KAAIF,GAAI,CAACA,EAAGI,KAAMJ,EAAGG,UACtGb,QAAQC,IAAIe,GACZb,aAAakB,QAAQnB,EAAqBI,KAAKgB,UAAUN,QAe7DnB,EAAKoB,iBAAiB,UAVtB,SAAkBM,GAClBA,EAAEC,iBACF,IAAIC,EAAW,IAAIC,SAAS7B,GAC5B,IAAK,IAAI8B,KAAQF,EAASG,UACtB5B,QAAQC,IAAI0B,EAAK,GAAK,MAAQA,EAAK,IAEvCxB,aAAa0B,WAAW3B,GACxBL,EAAKiC,c,8CCRU,SAAAC,EAAUC,EAAOC,EAAUC,GAKrCA,IAMAC,EANAD,KAAW,GAJfE,EAAAC,EACCC,kBADD,IAAAF,KAAAG,EAAAF,EAECG,iBAFD,IAAAD,KAAAE,EAAAJ,EAGCK,oBAHD,IAAAD,OAGgBE,EAHhBF,EAWIG,GAAY,EAGZC,EAAW,EAGf,SAASC,IACJX,GACHY,aAAaZ,GAgBf,SAASa,IAAuB,QAAAC,EAAAC,UAAAC,OAAZC,EAAY,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAZF,EAAYE,GAAAJ,UAAAI,GAC3BC,MAAOC,KACPC,EAAUC,KAAKC,MAAQd,EAO3B,SAASe,IACRf,EAAWa,KAAKC,MAChB1B,EAAS4B,MAAMN,EAAMH,GAOtB,SAASU,IACR3B,OAAYQ,EAfTC,IAkBCJ,IAAaE,GAAiBP,GAMlCyB,IAGDd,SAEqBH,IAAjBD,GAA8Be,EAAUzB,EACvCQ,GAMHK,EAAWa,KAAKC,MACXrB,IACJH,EAAY4B,WAAWrB,EAAeoB,EAAQF,EAAM5B,KAOrD4B,KAEwB,IAAftB,IAYVH,EAAY4B,WACXrB,EAAeoB,EAAQF,OACNjB,IAAjBD,EAA6BV,EAAQyB,EAAUzB,KAQlD,OAHAgB,EAAQgB,OAjFCA,SAAO9B,GACkBA,IAAjC+B,GAAiC/B,GAAW,IAApCgC,oBAAR,IAAAD,KACAnB,IACAF,GAAasB,GAiFPlB,E","sources":["src/js/03-feedback.js","node_modules/throttle-debounce/throttle.js"],"sourcesContent":["import {throttle} from \"throttle-debounce\";\n\nconst form = document.querySelector('form')\nconsole.log(form)\nconst FORM_CURRENT_INPUTS = 'formCurrentInputs';\n\nif (localStorage.getItem(FORM_CURRENT_INPUTS)) {\n     try { let obj = JSON.parse(localStorage.getItem(FORM_CURRENT_INPUTS));\n        [...form.elements].filter(el=>el.type!=='submit').map(el=>el.value = obj[el.name])} \n    catch(err) {return err} \n   \n    \n}\n    \nlet inputsObj = []\n\nfunction updateLocalStorage() {\n    inputsObj = Object.fromEntries([...form.elements].filter(el=>el.type!=='submit').map(el=>[el.name, el.value]))\n    console.log(inputsObj)\n    localStorage.setItem(FORM_CURRENT_INPUTS, JSON.stringify(inputsObj))\n}\n\nform.addEventListener('input', throttle(500, updateLocalStorage))\n\nfunction onSubmit(e) {\ne.preventDefault();\nlet formData = new FormData(form)\nfor (let pair of formData.entries()) {\n    console.log(pair[0] + ' : ' + pair[1])\n}\nlocalStorage.removeItem(FORM_CURRENT_INPUTS);\nform.reset();\n}\n\nform.addEventListener('submit', onSubmit)","/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nexport default function (delay, callback, options) {\n\tconst {\n\t\tnoTrailing = false,\n\t\tnoLeading = false,\n\t\tdebounceMode = undefined\n\t} = options || {};\n\t/*\n\t * After wrapper has stopped being called, this timeout ensures that\n\t * `callback` is executed at the proper times in `throttle` and `end`\n\t * debounce modes.\n\t */\n\tlet timeoutID;\n\tlet cancelled = false;\n\n\t// Keep track of the last time `callback` was executed.\n\tlet lastExec = 0;\n\n\t// Function to clear existing timeout\n\tfunction clearExistingTimeout() {\n\t\tif (timeoutID) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\t}\n\n\t// Function to cancel next exec\n\tfunction cancel(options) {\n\t\tconst { upcomingOnly = false } = options || {};\n\t\tclearExistingTimeout();\n\t\tcancelled = !upcomingOnly;\n\t}\n\n\t/*\n\t * The `wrapper` function encapsulates all of the throttling / debouncing\n\t * functionality and when executed will limit the rate at which `callback`\n\t * is executed.\n\t */\n\tfunction wrapper(...arguments_) {\n\t\tlet self = this;\n\t\tlet elapsed = Date.now() - lastExec;\n\n\t\tif (cancelled) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec() {\n\t\t\tlastExec = Date.now();\n\t\t\tcallback.apply(self, arguments_);\n\t\t}\n\n\t\t/*\n\t\t * If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t * to allow future `callback` executions.\n\t\t */\n\t\tfunction clear() {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif (!noLeading && debounceMode && !timeoutID) {\n\t\t\t/*\n\t\t\t * Since `wrapper` is being called for the first time and\n\t\t\t * `debounceMode` is true (at begin), execute `callback`\n\t\t\t * and noLeading != true.\n\t\t\t */\n\t\t\texec();\n\t\t}\n\n\t\tclearExistingTimeout();\n\n\t\tif (debounceMode === undefined && elapsed > delay) {\n\t\t\tif (noLeading) {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode with noLeading, if `delay` time has\n\t\t\t\t * been exceeded, update `lastExec` and schedule `callback`\n\t\t\t\t * to execute after `delay` ms.\n\t\t\t\t */\n\t\t\t\tlastExec = Date.now();\n\t\t\t\tif (!noTrailing) {\n\t\t\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, delay);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n\t\t\t\t * `callback`.\n\t\t\t\t */\n\t\t\t\texec();\n\t\t\t}\n\t\t} else if (noTrailing !== true) {\n\t\t\t/*\n\t\t\t * In trailing throttle mode, since `delay` time has not been\n\t\t\t * exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t * recent execution.\n\t\t\t *\n\t\t\t * If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t * after `delay` ms.\n\t\t\t *\n\t\t\t * If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t * execute after `delay` ms.\n\t\t\t */\n\t\t\ttimeoutID = setTimeout(\n\t\t\t\tdebounceMode ? clear : exec,\n\t\t\t\tdebounceMode === undefined ? delay - elapsed : delay\n\t\t\t);\n\t\t}\n\t}\n\n\twrapper.cancel = cancel;\n\n\t// Return the wrapper function.\n\treturn wrapper;\n}\n"],"names":["$bWR24","parcelRequire","form","document","querySelector","console","log","FORM_CURRENT_INPUTS","localStorage","getItem","obj","JSON","parse","elements","filter","el","type","map","value","name","err","inputsObj","addEventListener","throttle","Object","fromEntries","setItem","stringify","e","preventDefault","formData","FormData","pair","entries","removeItem","reset","$8b2e3fa012f8d6d4$export$de363e709c412c8a","delay","callback","options","timeoutID","_ref$noTrailing","_ref","noTrailing","_ref$noLeading","noLeading","_ref$debounceMode","debounceMode","undefined","cancelled","lastExec","clearExistingTimeout","clearTimeout","wrapper","_len","arguments","length","arguments_","Array","_key","self","this","elapsed","Date","now","exec","apply","clear","setTimeout","cancel","_ref2$upcomingOnly","upcomingOnly"],"version":3,"file":"03-feedback.79f37d4f.js.map"}